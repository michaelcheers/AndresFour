Bridge.assembly("JoelFive",function($asm){"use strict";Bridge.define("JoelFive.App",{main:function(){var $step=0,$task1,$taskResult1,game,$asyncBody=Bridge.fn.bind(this,function(){for(;;){$step=System.Array.min([0,1],$step);switch($step){case 0:$task1=JoelFive.Game.Parse({width:500,height:500,interval:25,drawInterval:25,children:System.Array.init([{type:"real game object",x:50,y:50,width:50,height:50,image:"#ffc0c0",gravity:1},{type:"real game object",x:50,y:200,width:50,height:50,image:"#c0ffc0",gravity:0}],System.Object)});$step=1;$task1.continueWith($asyncBody,!0);return;case 1:$taskResult1=$task1.getAwaitedResult();game=$taskResult1;document.body.appendChild(game.Canvas);game.Start();return;default:return}}},arguments);$asyncBody()},statics:{fields:{smallNumber:0},ctors:{init:function(){this.smallNumber=.0001}},methods:{LoadImage:function(value){var $t,image=($t=new Image,$t.src=value,$t),task=new System.Threading.Tasks.TaskCompletionSource;return image.onload=function(){task.setResult(image)},task.task}}}});Bridge.define("JoelFive.GameObject",{statics:{methods:{Parse:function(dynamic){var $step=0,$task1,$task2,$tcs=new System.Threading.Tasks.TaskCompletionSource,result,type,realGameObject,drawnGameObject,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1,2,3,4,5],$step);switch($step){case 0:if(result=null,type=dynamic.type,type==="real game object"){$step=1;continue}else if(type==="drawn game object"){$step=3;continue}$step=5;continue;case 1:realGameObject=new JoelFive.RealGameObject;$task1=realGameObject.Parse2(dynamic);$step=2;$task1.continueWith($asyncBody);return;case 2:$task1.getAwaitedResult();result=realGameObject;$step=5;continue;case 3:drawnGameObject=new JoelFive.DrawnGameObject;$task2=drawnGameObject.Parse1(dynamic);$step=4;$task2.continueWith($asyncBody);return;case 4:$task2.getAwaitedResult();result=drawnGameObject;$step=5;continue;case 5:$tcs.setResult(result);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task}}}});Bridge.define("JoelFive.Rectangle",{$kind:"struct",statics:{methods:{getDefaultValue:function(){return new JoelFive.Rectangle}}},fields:{X:0,Y:0,Width:0,Height:0},ctors:{ctor:function(){this.$initialize()}},methods:{Intersects:function(value){return value.X<this.X+this.Width&&this.X<value.X+value.Width&&value.Y<this.Y+this.Height&&this.Y<value.Y+value.Height},getHashCode:function(){return Bridge.addHash([3771388952,this.X,this.Y,this.Width,this.Height])},equals:function(o){return Bridge.is(o,JoelFive.Rectangle)?Bridge.equals(this.X,o.X)&&Bridge.equals(this.Y,o.Y)&&Bridge.equals(this.Width,o.Width)&&Bridge.equals(this.Height,o.Height):!1},$clone:function(to){var s=to||new JoelFive.Rectangle;return s.X=this.X,s.Y=this.Y,s.Width=this.Width,s.Height=this.Height,s}}});Bridge.define("JoelFive.Vector2",{$kind:"struct",statics:{methods:{getDefaultValue:function(){return new JoelFive.Vector2}}},fields:{X:0,Y:0},ctors:{ctor:function(){this.$initialize()}},methods:{getHashCode:function(){return Bridge.addHash([1955977157,this.X,this.Y])},equals:function(o){return Bridge.is(o,JoelFive.Vector2)?Bridge.equals(this.X,o.X)&&Bridge.equals(this.Y,o.Y):!1},$clone:function(to){var s=to||new JoelFive.Vector2;return s.X=this.X,s.Y=this.Y,s}}});Bridge.define("JoelFive.DrawnGameObject",{inherits:[JoelFive.GameObject],fields:{Position:null,Image:null},props:{X:{get:function(){return this.Position.X},set:function(value){this.Position.X=value}},Y:{get:function(){return this.Position.Y},set:function(value){this.Position.Y=value}},Width:{get:function(){return this.Position.Width},set:function(value){this.Position.Width=value}},Height:{get:function(){return this.Position.Height},set:function(value){this.Position.Height=value}}},ctors:{init:function(){this.Position=new JoelFive.Rectangle}},methods:{Parse1:function(dynamic){var $step=0,$task1,$taskResult1,$tcs=new System.Threading.Tasks.TaskCompletionSource,imageString,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1,2,3,4],$step);switch($step){case 0:if(this.X=dynamic.x,this.Y=dynamic.y,this.Width=dynamic.width,this.Height=dynamic.height,imageString=dynamic.image,imageString.charCodeAt(0)===35){$step=1;continue}else{$step=2;continue}case 1:this.Image=imageString;$step=4;continue;case 2:$task1=JoelFive.App.LoadImage(imageString);$step=3;$task1.continueWith($asyncBody);return;case 3:$taskResult1=$task1.getAwaitedResult();this.Image=$taskResult1;$step=4;continue;case 4:$tcs.setResult(null);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task}}});Bridge.define("JoelFive.Game",{inherits:[JoelFive.GameObject],statics:{methods:{Parse:function(dynamic){var $step=0,$task1,$taskResult1,$tcs=new System.Threading.Tasks.TaskCompletionSource,children,game,$t,$t1,$t2,item,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1,2,3,4],$step);switch($step){case 0:game=($t=new JoelFive.Game,$t.Children=children=new(System.Collections.Generic.List$1(JoelFive.GameObject)),$t.Interval=dynamic.interval,$t.DrawInterval=dynamic.drawInterval,$t.Canvas=($t1=document.createElement("canvas"),$t1.width=dynamic.width,$t1.height=dynamic.height,$t1),$t);$t2=Bridge.getEnumerator(Bridge.cast(dynamic.children,System.Array.type(System.Object)));$step=1;continue;case 1:if($t2.moveNext()){item=$t2.Current;$step=2;continue}$step=4;continue;case 2:$task1=JoelFive.GameObject.Parse(item);$step=3;$task1.continueWith($asyncBody);return;case 3:$taskResult1=$task1.getAwaitedResult();children.add($taskResult1);$step=1;continue;case 4:$tcs.setResult(game);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task}}},fields:{Children:null,Interval:0,DrawInterval:0,Canvas:null},methods:{Start:function(){Bridge.global.setInterval(Bridge.fn.cacheBind(this,this.Update),this.Interval);Bridge.global.setInterval(Bridge.fn.cacheBind(this,this.Draw),this.DrawInterval)},Draw:function(){var $t,context=this.Canvas.getContext("2d"),child,drawObject;context.clearRect(0,0,this.Canvas.width,this.Canvas.height);$t=Bridge.getEnumerator(this.Children);try{while($t.moveNext())child=$t.Current,Bridge.is(child,JoelFive.DrawnGameObject)&&(drawObject=child,Bridge.is(drawObject.Image,System.String)?(context.fillStyle=drawObject.Image,context.fillRect(drawObject.X,drawObject.Y,drawObject.Width,drawObject.Height)):context.drawImage(drawObject.Image,drawObject.X,drawObject.Y))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$dispose()}},Update:function(){var $t,child;$t=Bridge.getEnumerator(this.Children);try{while($t.moveNext())child=$t.Current,Bridge.is(child,JoelFive.RealGameObject)&&child.Update(this)}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$dispose()}}}});Bridge.define("JoelFive.RealGameObject",{inherits:[JoelFive.DrawnGameObject],fields:{Gravity:0},methods:{Parse2:function(dynamic){var $step=0,$task1,$tcs=new System.Threading.Tasks.TaskCompletionSource,$async_e,$asyncBody=Bridge.fn.bind(this,function(){try{for(;;){$step=System.Array.min([0,1],$step);switch($step){case 0:this.Gravity=dynamic.gravity;$task1=this.Parse1(dynamic);$step=1;$task1.continueWith($asyncBody);return;case 1:$task1.getAwaitedResult();$tcs.setResult(null);return;default:$tcs.setResult(null);return}}}catch($async_e1){$async_e=System.Exception.create($async_e1);$tcs.setException($async_e)}},arguments);return $asyncBody(),$tcs.task},Update:function($in){var $t,$t1,intersects=new(System.Collections.Generic.List$1(JoelFive.RealGameObject)),child,realGameObject,doesIntersect,min;$t=Bridge.getEnumerator($in.Children);try{while($t.moveNext())child=$t.Current,Bridge.is(child,JoelFive.RealGameObject)&&(realGameObject=child,doesIntersect=($t1=new JoelFive.Rectangle,$t1.X=this.X,$t1.Width=this.Width,$t1.Y=this.Y+this.Height,$t1.Height=this.Gravity,$t1).Intersects(realGameObject.Position.$clone()),doesIntersect&&intersects.add(realGameObject))}finally{Bridge.is($t,System.IDisposable)&&$t.System$IDisposable$dispose()}intersects.Count===0?this.Y+=this.Gravity:(min=System.Linq.Enumerable.from(intersects).min(Bridge.fn.bind(this,$asm.$.JoelFive.RealGameObject.f1)),this.Y=min)}}});Bridge.ns("JoelFive.RealGameObject",$asm.$);Bridge.apply($asm.$.JoelFive.RealGameObject,{f1:function(v){return v.Y-this.Height}})});